{"version":3,"sources":["rendering/setupRenderer.js","rendering/createFish.js","rendering/createStingRay.js","rendering/createSiameseFish.js","rendering/createPond.js","rendering/createPlayer.js","flock.js","GameOver.js","Game.js","rendering/createCreature.js","Preview.js","App.js","index.js"],"names":["setupRenderer","canvas","scene","THREE","aspect","window","innerWidth","innerHeight","camera","frustumSize","renderer","antialias","setSize","addEventListener","height","width","updateProjectionMatrix","rotation","x","Math","PI","position","z","hemisphereLight","shadowLight","set","ambientLight","createLights","forEach","light","add","calculateOffset","_ref","headLength","bodyLength","fishes","headColor","bodyColor","tailLength","tailColor","flapLength","flapColor","flapType","eyeColor","createFish","fishType","arguments","length","undefined","fish","group","geometry","material","color","flatShading","mesh","createHead","createBody","baseGeometry","baseMaterial","baseMesh","topGeometry","topMaterial","topMesh","bottomGeometry","bottomMaterial","bottomMesh","createTail","y","createFlap","createLeftEye","createRightEye","createStingRay","createSiameseFish","createTailA","createSticks","createTailB","WALL_HEIGHT","WALL_COLOR","createPond","worldWidth","worldHeight","round","vertices","attributes","array","i","j","l","random","createWater","createBorderHorizontal","createBorderVertical","COLOR","createPlayer","outerGroup","createTop","createTopA","createPropulsion","createPropulsionA","scale","SEPARATE_RADIUS","NEIGHBOUR_RADIUS","TARGET_RADIUS","SEPARATION_WEIGHT","ALIGNMENT_WEIGHT","COHESION_WEIGHT","TARGET_WEIGHT","MAX_SPEED","flock","boid","neighbours","leader","separation","flockMembers","filter","neighbour","distance","distanceTo","Vector3","reduce","acc","clone","sub","divideScalar","separate","multiplyScalar","alignment","velocity","align","cohesion","normalize","cohere","targeting","target","acceleration","GameOver","react_default","a","createElement","className","href","PLAYER_MAX_SPEED","Game","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","ref","createRef","votingRef","state","score","gameOver","player","maxSpeed","creatures","push","creatureType","floor","mousePosition","_this2","_setupRenderer","current","pondMesh","playerMesh","creatureMeshes","map","type","creature","animate","index","neighbourIndex","clampScalar","worldColision","angle","playerAngle","render","setState","requestAnimationFrame","handleMove","e","preventDefault","touch","touches","clientX","clientY","center","mouse","corner","Fragment","GameOver_GameOver","id","Component","entity","Preview","_this$props","rotate","stingRay","siameseFish","App","searchParams","URLSearchParams","location","search","get","Preview_Preview","parseInt","Game_Game","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.84291745.chunk.js","sourcesContent":["import * as THREE from 'three'\n\nexport default function setupRenderer(canvas) {\n  const scene = new THREE.Scene()\n  const aspect = window.innerWidth / window.innerHeight\n  const frustumSize = 40\n  const camera = new THREE.OrthographicCamera(\n    (frustumSize * aspect) / -2,\n    (frustumSize * aspect) / 2,\n    frustumSize / 2,\n    frustumSize / -2,\n    1,\n    2000,\n  )\n\n  const renderer = new THREE.WebGLRenderer({ canvas, antialias: true })\n  renderer.setSize(window.innerWidth, window.innerHeight)\n\n  function handleWindowResize() {\n    const height = window.innerHeight\n    const width = window.innerWidth\n    renderer.setSize(width, height)\n    camera.aspect = width / height\n    camera.updateProjectionMatrix()\n  }\n\n  window.addEventListener('resize', handleWindowResize, false)\n\n  camera.rotation.x = Math.PI / 4\n  camera.position.z = 60\n\n  createLights().forEach(light => scene.add(light))\n\n  return { scene, camera, renderer }\n}\n\nfunction createLights() {\n  const hemisphereLight = new THREE.HemisphereLight(0xaaaaaa, 0x000000, 0.9)\n\n  const shadowLight = new THREE.DirectionalLight(0xffffff, 0.9)\n  shadowLight.position.set(150, 350, 350)\n\n  const ambientLight = new THREE.AmbientLight(0xdc8874, 0.5)\n\n  return [hemisphereLight, shadowLight, ambientLight]\n}\n","import * as THREE from 'three'\n\nconst calculateOffset = ({ headLength, bodyLength }) => -(bodyLength + headLength) / 2\n\nconst fishes = [\n  {\n    headLength: 1,\n    headColor: 0x271b74,\n    bodyLength: 0.5,\n    bodyColor: 0x271b74,\n    tailLength: 0.4,\n    tailColor: 0xffe700,\n    flapLength: 0.3,\n    flapColor: 0xffe700,\n    flapType: 'bottom',\n    eyeColor: 0x75253c,\n  },\n  {\n    headLength: 0.5,\n    headColor: 0xfb7813,\n    bodyLength: 1.5,\n    bodyColor: 0x833c54,\n    tailLength: 0.45,\n    tailColor: 0x4a2ee7,\n    flapLength: 0.25,\n    flapColor: 0x4a2ee7,\n    flapType: 'bottom',\n    eyeColor: 0x5c47a2,\n  },\n  {\n    headLength: 1.0,\n    headColor: 0x7f724e,\n    bodyLength: 0,\n    tailLength: 0.45,\n    tailColor: 0x271e0b,\n    flapLength: 0.35,\n    flapColor: 0x1a634d,\n    flapType: 'both',\n    eyeColor: 0x653412,\n  },\n]\n\nexport default function createFish(fishType = 2) {\n  const fish = fishes[fishType]\n\n  const group = new THREE.Group()\n  group.add(createHead(fish))\n  if (fish.bodyLength > 0) {\n    group.add(createBody(fish))\n  }\n  group.add(createTail(fish))\n  group.add(createFlap(fish))\n  group.add(createLeftEye(fish))\n  group.add(createRightEye(fish))\n  return group\n}\n\nfunction createHead(fish) {\n  const geometry = new THREE.BoxGeometry(fish.headLength, 1, 1)\n  const material = new THREE.MeshPhongMaterial({\n    color: fish.headColor,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.position.x = calculateOffset(fish)\n\n  return mesh\n}\n\nfunction createBody(fish) {\n  const geometry = new THREE.BoxGeometry(fish.bodyLength, 0.8, 0.8)\n  const material = new THREE.MeshPhongMaterial({\n    color: fish.bodyColor,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.position.x = fish.headLength / 2 + fish.bodyLength / 2 + calculateOffset(fish)\n\n  return mesh\n}\n\nfunction createTail(fish) {\n  const group = new THREE.Group()\n\n  const baseGeometry = new THREE.BoxGeometry(fish.tailLength, fish.tailLength, fish.tailLength)\n  const baseMaterial = new THREE.MeshPhongMaterial({\n    color: fish.tailColor,\n    flatShading: true,\n  })\n\n  const baseMesh = new THREE.Mesh(baseGeometry, baseMaterial)\n  group.add(baseMesh)\n\n  const topGeometry = new THREE.BoxGeometry(3 * fish.tailLength, 0.5 * fish.tailLength, 0.05)\n  const topMaterial = new THREE.MeshPhongMaterial({\n    color: fish.tailColor,\n    flatShading: true,\n  })\n\n  const topMesh = new THREE.Mesh(topGeometry, topMaterial)\n  topMesh.rotation.z = -0.4\n  group.add(topMesh)\n\n  const bottomGeometry = new THREE.BoxGeometry(3 * fish.tailLength, 0.5 * fish.tailLength, 0.05)\n  const bottomMaterial = new THREE.MeshPhongMaterial({\n    color: fish.tailColor,\n    flatShading: true,\n  })\n\n  const bottomMesh = new THREE.Mesh(bottomGeometry, bottomMaterial)\n  bottomMesh.rotation.z = 0.4\n  group.add(bottomMesh)\n\n  group.position.x = fish.bodyLength + fish.headLength / 2 + calculateOffset(fish)\n\n  return group\n}\n\nfunction createFlap(fish) {\n  if (fish.flapType === 'both') {\n    const group = new THREE.Group()\n\n    const width = 3 * fish.flapLength\n\n    const topGeometry = new THREE.BoxGeometry(width, 0.5 * fish.flapLength, 0.05)\n    const topMaterial = new THREE.MeshPhongMaterial({\n      color: fish.flapColor,\n      flatShading: true,\n    })\n\n    const topMesh = new THREE.Mesh(topGeometry, topMaterial)\n    topMesh.rotation.z = 0.8\n    topMesh.position.y = 0.5\n    topMesh.position.x = -width / 2 + 0.1\n\n    group.add(topMesh)\n\n    const bottomGeometry = new THREE.BoxGeometry(width, 0.5 * fish.flapLength, 0.05)\n    const bottomMaterial = new THREE.MeshPhongMaterial({\n      color: fish.flapColor,\n      flatShading: true,\n    })\n\n    const bottomMesh = new THREE.Mesh(bottomGeometry, bottomMaterial)\n    bottomMesh.rotation.z = -0.8\n    bottomMesh.position.y = -0.5\n    bottomMesh.position.x = -width / 2 + 0.1\n\n    group.add(bottomMesh)\n\n    return group\n  }\n\n  const geometry = new THREE.BoxGeometry(fish.bodyLength * 0.2, fish.flapLength, 0.25)\n  const material = new THREE.MeshPhongMaterial({\n    color: fish.flapColor,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.position.x = fish.headLength / 2 + fish.bodyLength / 2 + calculateOffset(fish)\n  mesh.position.y = -(0.8 / 2 + fish.flapLength / 2)\n\n  return mesh\n}\n\nfunction createLeftEye(fish) {\n  const geometry = new THREE.BoxGeometry(0.1, 0.16, 0.16)\n  const material = new THREE.MeshPhongMaterial({\n    color: fish.eyeColor,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.position.x = -(fish.headLength / 2 + 0.16 / 2) + calculateOffset(fish)\n  mesh.position.y = 0.15\n  mesh.position.z = 0.25\n\n  return mesh\n}\n\nfunction createRightEye(fish) {\n  const geometry = new THREE.BoxGeometry(0.1, 0.16, 0.16)\n  const material = new THREE.MeshPhongMaterial({\n    color: fish.eyeColor,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.position.x = -(fish.headLength / 2 + 0.16 / 2) + calculateOffset(fish)\n  mesh.position.y = 0.15\n  mesh.position.z = -0.25\n\n  return mesh\n}\n","import * as THREE from 'three'\n\nexport default function createStingRay() {\n  const group = new THREE.Group()\n  group.add(createBody())\n  group.add(createTail())\n  group.add(createLeftEye())\n  group.add(createRightEye())\n  return group\n}\n\nfunction createBody() {\n  const geometry = new THREE.BoxGeometry(2, 2, 0.25)\n  const material = new THREE.MeshPhongMaterial({\n    color: 0x29303c,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.rotation.z = Math.PI / 4\n  return mesh\n}\n\nfunction createTail() {\n  const geometry = new THREE.BoxGeometry(2.5, 0.1, 0.1)\n  const material = new THREE.MeshPhongMaterial({\n    color: 0x191d24,\n    flatShading: true,\n  })\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.position.x = 2\n  return mesh\n}\n\nfunction createLeftEye() {\n  const geometry = new THREE.BoxGeometry(0.15, 0.15, 0.15)\n  const material = new THREE.MeshPhongMaterial({\n    color: 0x191d24,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.position.x = -0.5\n  mesh.position.y = 0.3\n  mesh.position.z = 0.15\n\n  return mesh\n}\n\nfunction createRightEye() {\n  const geometry = new THREE.BoxGeometry(0.15, 0.15, 0.15)\n  const material = new THREE.MeshPhongMaterial({\n    color: 0x191d24,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.position.x = -0.5\n  mesh.position.y = -0.3\n  mesh.position.z = 0.15\n\n  return mesh\n}\n","import * as THREE from 'three'\n\nexport default function createSiameseFish() {\n  const group = new THREE.Group()\n  group.add(createBody())\n  group.add(createHead())\n  group.add(createTail())\n  group.add(createTailA())\n  group.add(createSticks())\n  group.add(createTailB())\n  group.add(createLeftEye())\n  group.add(createRightEye())\n  return group\n}\n\nfunction createBody() {\n  const geometry = new THREE.BoxGeometry(0.5, 1, 1)\n  const material = new THREE.MeshPhongMaterial({\n    color: 0x44210c,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n\n  return mesh\n}\n\nfunction createHead() {\n  const geometry = new THREE.BoxGeometry(0.5, 1.1, 1)\n  const material = new THREE.MeshPhongMaterial({\n    color: 0x321909,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.position.x = -0.5\n\n  return mesh\n}\n\nfunction createTail() {\n  const geometry = new THREE.BoxGeometry(0.5, 0.9, 1)\n  const material = new THREE.MeshPhongMaterial({\n    color: 0x592c10,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.position.x = 0.5\n\n  return mesh\n}\n\nfunction createTailA() {\n  const geometry = new THREE.BoxGeometry(0.5, 0.8, 1)\n  const material = new THREE.MeshPhongMaterial({\n    color: 0x6f3613,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.position.x = 1\n\n  return mesh\n}\n\nfunction createTailB() {\n  const geometry = new THREE.BoxGeometry(0.5, 0.7, 1)\n  const material = new THREE.MeshPhongMaterial({\n    color: 0x8d4519,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.position.x = 1.5\n\n  return mesh\n}\n\nfunction createSticks() {\n  const geometry = new THREE.BoxGeometry(0.5, 0.6, 1)\n  const material = new THREE.MeshPhongMaterial({\n    color: 0x994b1b,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.position.x = 2\n\n  return mesh\n}\n\nfunction createLeftEye() {\n  const geometry = new THREE.BoxGeometry(0.1, 0.16, 0.16)\n  const material = new THREE.MeshPhongMaterial({\n    color: 0x994b1b,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.position.x = -0.75\n  mesh.position.y = 0.25\n  mesh.position.z = 0.5\n\n  return mesh\n}\n\nfunction createRightEye() {\n  const geometry = new THREE.BoxGeometry(0.1, 0.16, 0.16)\n  const material = new THREE.MeshPhongMaterial({\n    color: 0x994b1b,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.position.x = -0.75\n  mesh.position.y = -0.25\n  mesh.position.z = 0.5\n\n  return mesh\n}\n","import * as THREE from 'three'\n\nconst WALL_HEIGHT = 10\nconst WALL_COLOR = 0x142b38\n\nexport default function createPond(worldWidth, worldHeight) {\n  const group = new THREE.Group()\n\n  group.add(createWater(worldWidth, worldHeight))\n  group.add(createBorderHorizontal(worldWidth, worldHeight, -1))\n  group.add(createBorderHorizontal(worldWidth, worldHeight, 1))\n  group.add(createBorderVertical(worldWidth, worldHeight, -1))\n  group.add(createBorderVertical(worldWidth, worldHeight, 1))\n\n  group.position.z = -2\n\n  return group\n}\n\nfunction createBorderHorizontal(worldWidth, worldHeight, position) {\n  const geometry = new THREE.BoxGeometry(worldWidth, 100, WALL_HEIGHT)\n  const material = new THREE.MeshPhongMaterial({\n    color: WALL_COLOR,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.position.y = (worldHeight / 2 + 100 / 2) * position\n\n  return mesh\n}\n\nfunction createBorderVertical(worldWidth, worldHeight, position) {\n  const geometry = new THREE.BoxGeometry(100, worldHeight + 100 * 2, WALL_HEIGHT)\n  const material = new THREE.MeshPhongMaterial({\n    color: WALL_COLOR,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.position.x = (worldHeight / 2 + 100 / 2) * position\n\n  return mesh\n}\n\nfunction createWater(worldWidth, worldHeight) {\n  const geometry = new THREE.PlaneBufferGeometry(\n    worldWidth,\n    worldHeight,\n    Math.round(worldWidth / 5),\n    Math.round(worldHeight / 5),\n  )\n\n  const vertices = geometry.attributes.position.array\n  for (let i = 0, j = 0, l = vertices.length; i < l; i++, j += 3) {\n    vertices[j + 2] = Math.random() * 0.2\n  }\n\n  const material = new THREE.MeshPhongMaterial({\n    color: 0x0b486b,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n\n  return mesh\n}\n","import * as THREE from 'three'\n\nconst COLOR = 0xe4bd11\n\nexport default function createPlayer() {\n  const outerGroup = new THREE.Group()\n\n  const group = new THREE.Group()\n  group.add(createBody())\n  group.add(createHead())\n  group.add(createTop())\n  group.add(createTopA())\n  group.add(createPropulsion())\n  group.add(createPropulsionA())\n\n  group.scale.x = 2.5\n  group.scale.y = 2.5\n  group.scale.z = 2.5\n  group.rotation.x = Math.PI / 2\n\n  outerGroup.add(group)\n\n  return outerGroup\n}\n\nfunction createBody() {\n  const geometry = new THREE.BoxGeometry(2.5, 1.0, 1.5)\n  const material = new THREE.MeshPhongMaterial({\n    color: COLOR,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n\n  return mesh\n}\n\nfunction createHead() {\n  const geometry = new THREE.BoxGeometry(1.5, 0.5, 1)\n  const material = new THREE.MeshPhongMaterial({\n    color: COLOR,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n  // mesh.position.x = 0.1\n  mesh.position.y = 0.75\n\n  return mesh\n}\n\nfunction createTop() {\n  const geometry = new THREE.BoxGeometry(0.25, 1, 0.25)\n  const material = new THREE.MeshPhongMaterial({\n    color: COLOR,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n  //mesh.position.x = 0.1\n  mesh.position.y = 1.25\n\n  return mesh\n}\n\nfunction createTopA() {\n  const geometry = new THREE.BoxGeometry(1, 0.25, 0.25)\n  const material = new THREE.MeshPhongMaterial({\n    color: COLOR,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.position.x = -0.375\n  mesh.position.y = 1.75\n\n  return mesh\n}\n\nfunction createPropulsion() {\n  const geometry = new THREE.BoxGeometry(0.2, 0.2, 0.2)\n  const material = new THREE.MeshPhongMaterial({\n    color: COLOR,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.position.x = 1.3\n\n  return mesh\n}\n\nfunction createPropulsionA() {\n  const geometry = new THREE.BoxGeometry(0.25, 1, 0.25)\n  const material = new THREE.MeshPhongMaterial({\n    color: COLOR,\n    flatShading: true,\n  })\n\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.position.x = 1.5\n  mesh.rotation.x = 0.3\n\n  return mesh\n}\n","import { Vector3 } from 'three'\n\nconst SEPARATE_RADIUS = 3\nconst NEIGHBOUR_RADIUS = 15\nconst TARGET_RADIUS = 20\nconst SEPARATION_WEIGHT = 2\nconst ALIGNMENT_WEIGHT = 10\nconst COHESION_WEIGHT = 0.03\nconst TARGET_WEIGHT = 0.9\n\nexport const MAX_SPEED = 0.2\n\nexport default function flock(boid, neighbours, leader) {\n  const separation = separate(boid, neighbours).multiplyScalar(SEPARATION_WEIGHT)\n  const alignment = align(boid, neighbours).multiplyScalar(ALIGNMENT_WEIGHT)\n  const cohesion = cohere(boid, neighbours).multiplyScalar(COHESION_WEIGHT)\n  const targeting = target(boid, leader).multiplyScalar(TARGET_WEIGHT)\n\n  const acceleration = separation\n    .add(alignment)\n    .add(cohesion)\n    .add(targeting)\n    // Slow the acceleration down by a big factor\n    .divideScalar(400)\n\n  return { acceleration, separation, alignment, cohesion }\n}\n\nfunction target(boid, leader) {\n  if (!leader || (leader && boid.position.distanceTo(leader.position) > TARGET_RADIUS)) {\n    return new Vector3(0, 0, 0)\n  }\n\n  const targeting = leader.position.clone().sub(boid.position)\n\n  return targeting\n}\n\nfunction cohere(boid, neighbours) {\n  const flockMembers = neighbours.filter(neighbour => {\n    const distance = boid.position.distanceTo(neighbour.position)\n    return distance < NEIGHBOUR_RADIUS\n  })\n\n  if (flockMembers.length === 0) {\n    return new Vector3(0, 0, 0)\n  }\n\n  const centerOfMass = flockMembers\n    .reduce((acc, neighbour) => acc.add(neighbour.position), new Vector3())\n    .divideScalar(flockMembers.length)\n    .divideScalar(100)\n\n  const cohesion = centerOfMass.sub(boid.position).normalize()\n\n  return cohesion\n}\n\nfunction align(boid, neighbours) {\n  const flockMembers = neighbours.filter(neighbour => {\n    const distance = boid.position.distanceTo(neighbour.position)\n    return distance < NEIGHBOUR_RADIUS\n  })\n\n  if (flockMembers.length === 0) {\n    return new Vector3(0, 0, 0)\n  }\n\n  return flockMembers\n    .reduce((acc, neighbour) => acc.add(neighbour.velocity), new Vector3())\n    .divideScalar(flockMembers.length)\n}\n\nfunction separate(boid, neighbours) {\n  const flockMembers = neighbours.filter(neighbour => {\n    const distance = boid.position.distanceTo(neighbour.position)\n    return distance < SEPARATE_RADIUS\n  })\n\n  if (flockMembers.length === 0) {\n    return new Vector3(0, 0, 0)\n  }\n\n  return flockMembers\n    .reduce((acc, neighbour) => {\n      return boid.position\n        .clone()\n        .sub(neighbour.position)\n        .add(acc)\n    }, new Vector3())\n    .divideScalar(flockMembers.length)\n}\n","import React from 'react'\n\nimport './GameOver.css'\n\nexport default function GameOver() {\n  return (\n    <div className=\"gameOver\">\n      <h1>You have found all the fish!</h1>\n\n      <p>\n        Game built for the NodeKO 2018 hackathon by <a href=\"https://github.com/pirelenito/\">pirelenito</a> and{' '}\n        <a href=\"https://github.com/jucomin/\">jucomin</a>{' '}\n      </p>\n\n      <a href=\"https://www.nodeknockout.com/entries/7-macaco-maluco/vote\">➡ Vote for Us</a>\n      <a href=\"/\">➡ Restart</a>\n    </div>\n  )\n}\n","import React, { Component, createRef } from 'react'\nimport * as THREE from 'three'\n\nimport setupRenderer from './rendering/setupRenderer'\nimport createCreature from './rendering/createCreature'\nimport createPond from './rendering/createPond'\nimport createPlayer from './rendering/createPlayer'\n\nimport flock, { MAX_SPEED } from './flock'\n\nimport GameOver from './GameOver'\n\nimport './Game.css'\n\nconst worldWidth = 200\nconst worldHeight = 200\nconst PLAYER_MAX_SPEED = MAX_SPEED * 4\n\nexport default class Game extends Component {\n  constructor(props) {\n    super(props)\n    this.ref = createRef()\n    this.votingRef = createRef()\n\n    this.state = {\n      score: 0,\n      gameOver: false,\n    }\n\n    this.player = {\n      position: new THREE.Vector3(0, 0, 0),\n      velocity: new THREE.Vector3(0.2, 0.4, 0),\n      acceleration: new THREE.Vector3(0, 0, 0),\n      maxSpeed: 0,\n    }\n\n    this.creatures = []\n    for (var i = 0; i < 50; i++) {\n      this.creatures.push({\n        position: new THREE.Vector3(\n          Math.random() * worldWidth - worldWidth / 2,\n          Math.random() * worldHeight - worldHeight / 2,\n          0,\n        ),\n        velocity: new THREE.Vector3(\n          Math.random() * 2 * MAX_SPEED - MAX_SPEED / 2,\n          Math.random() * 2 * MAX_SPEED - MAX_SPEED / 2,\n          0,\n        ),\n\n        creatureType: Math.floor(Math.random() * 5),\n      })\n    }\n\n    this.mousePosition = [window.width / 2, window.height / 2]\n  }\n\n  componentDidMount() {\n    const { camera, scene, renderer } = setupRenderer(this.ref.current)\n\n    const pondMesh = createPond(worldWidth, worldHeight)\n    scene.add(pondMesh)\n\n    const playerMesh = createPlayer()\n    scene.add(playerMesh)\n\n    const creatureMeshes = this.creatures.map(({ creatureType }) => createCreature(creatureType))\n\n    creatureMeshes.forEach(creature => scene.add(creature))\n\n    const animate = () => {\n      this.creatures.forEach((creature, index) => {\n        const neighbours = this.creatures.filter((creature, neighbourIndex) => neighbourIndex !== index)\n        const { acceleration } = flock(creature, neighbours, this.player)\n        creature.velocity.add(acceleration).clampScalar(-MAX_SPEED, MAX_SPEED)\n        creature.position.add(creature.velocity)\n\n        worldColision(creature)\n\n        const angle = new THREE.Vector2(creature.velocity.x, creature.velocity.y).angle() + Math.PI\n\n        const mesh = creatureMeshes[index]\n        mesh.position.x = creature.position.x\n        mesh.position.y = creature.position.y\n        mesh.position.z = index * 0.001\n        mesh.rotation.z = angle\n      })\n\n      this.player.velocity.add(this.player.acceleration).clampScalar(-this.player.maxSpeed, this.player.maxSpeed)\n\n      this.player.position.add(this.player.velocity)\n      worldColision(this.player)\n\n      camera.position.x = this.player.position.x\n      camera.position.y = this.player.position.y - 55\n\n      const playerAngle = new THREE.Vector2(this.player.velocity.x, this.player.velocity.y).angle() + Math.PI\n\n      playerMesh.position.x = this.player.position.x\n      playerMesh.position.y = this.player.position.y\n      playerMesh.rotation.z = playerAngle\n\n      renderer.render(scene, camera)\n\n      const score = this.creatures.filter(creature => this.player.position.distanceTo(creature.position) < 20).length\n      const gameOver = score === this.creatures.length\n\n      this.setState({ score, gameOver })\n\n      if (!gameOver) {\n        requestAnimationFrame(animate)\n      }\n    }\n\n    animate()\n\n    const handleMove = e => {\n      e.preventDefault()\n\n      const touch = e.touches ? e.touches[0] : e\n\n      this.player.acceleration.x =\n        ((touch.clientX - window.innerWidth / 2) / (window.innerWidth / 2) / (window.innerWidth / 2)) * 4\n      this.player.acceleration.y =\n        (-((touch.clientY - window.innerHeight / 2) / (window.innerHeight / 2)) / (window.innerHeight / 2)) * 4\n\n      const center = new THREE.Vector2(window.innerWidth / 2, window.innerHeight / 2)\n      const mouse = new THREE.Vector2(touch.clientX, touch.clientY)\n      const corner = new THREE.Vector2()\n\n      this.player.maxSpeed = (center.distanceTo(mouse) / center.distanceTo(corner)) * PLAYER_MAX_SPEED\n    }\n\n    const disableScroll = e => {\n      e.preventDefault()\n    }\n\n    window.addEventListener('touchstart', disableScroll)\n    window.addEventListener('touchmove', handleMove)\n    window.addEventListener('mousemove', handleMove)\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"score\">\n          {this.state.score} / {this.creatures.length}\n        </div>\n        {this.state.gameOver && <GameOver />}\n        <canvas id=\"game\" ref={this.ref} />\n      </>\n    )\n  }\n}\n\nfunction worldColision(entity) {\n  if (entity.position.x < -worldWidth / 2 || entity.position.x > worldWidth / 2) {\n    entity.velocity.x = -entity.velocity.x\n  }\n\n  if (entity.position.y < -worldWidth / 2 || entity.position.y > worldWidth / 2) {\n    entity.velocity.y = -entity.velocity.y\n  }\n}\n","import createFish from './createFish'\nimport createStingRay from './createStingRay'\nimport createSiameseFish from './createSiameseFish'\n\nexport default function createCreature(type) {\n  if (type === 3) {\n    return createStingRay()\n  }\n\n  if (type === 4) {\n    return createSiameseFish()\n  }\n\n  return createFish(type)\n}\n","import React, { Component, createRef } from 'react'\n\nimport setupRenderer from './rendering/setupRenderer'\nimport createFish from './rendering/createFish'\nimport createStingRay from './rendering/createStingRay'\nimport createPlayer from './rendering/createPlayer'\nimport createSiameseFish from './rendering/createSiameseFish'\n\nexport default class Preview extends Component {\n  constructor(props) {\n    super(props)\n    this.ref = createRef()\n  }\n\n  componentDidMount() {\n    const { camera, scene, renderer } = setupRenderer(this.ref.current)\n    const { rotate, fish, player, stingRay, siameseFish } = this.props\n\n    camera.position.z = 4\n\n    const mesh = siameseFish\n      ? createSiameseFish()\n      : player\n        ? createPlayer()\n        : stingRay\n          ? createStingRay()\n          : createFish(fish)\n    scene.add(mesh)\n\n    function animate() {\n      if (rotate) {\n        mesh.rotation.y -= -0.01\n      }\n\n      renderer.render(scene, camera)\n\n      requestAnimationFrame(animate)\n    }\n    animate()\n  }\n\n  render() {\n    return <canvas id=\"game\" ref={this.ref} />\n  }\n}\n","import React, { Component } from 'react'\nimport './App.css'\nimport Game from './Game'\nimport Preview from './Preview'\n\nclass App extends Component {\n  render() {\n    const searchParams = new URLSearchParams(window.location.search)\n    const hasPreview =\n      searchParams.get('fish') ||\n      searchParams.get('stingRay') ||\n      searchParams.get('player') ||\n      searchParams.get('siameseFish')\n    return hasPreview ? (\n      <Preview\n        fish={parseInt(searchParams.get('fish'), 10)}\n        stingRay={!!searchParams.get('stingRay')}\n        player={searchParams.get('player') === 'true'}\n        siameseFish={searchParams.get('siameseFish') === 'true'}\n        rotate={searchParams.get('rotate') === 'true'}\n      />\n    ) : (\n      <Game />\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}